// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vyozepJ6xip7aaU4b7VPCN
// Component: 7HssrmuA-MYOA1
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_landing_page.module.css"; // plasmic-import: vyozepJ6xip7aaU4b7VPCN/projectcss
import sty from "./PlasmicRating.module.css"; // plasmic-import: 7HssrmuA-MYOA1/css

import EmptyStarIcon from "./icons/PlasmicIcon__EmptyStar"; // plasmic-import: yvXIQK0y7UIOaR/icon
import FullStarIcon from "./icons/PlasmicIcon__FullStar"; // plasmic-import: CoSEPSZCoxfxMT/icon
import HalfStarIcon from "./icons/PlasmicIcon__HalfStar"; // plasmic-import: M83FA2ZZq45Xak/icon

export type PlasmicRating__VariantMembers = {
  rating:
    | "one"
    | "two"
    | "three"
    | "four"
    | "five"
    | "half"
    | "oneHalf"
    | "twoHalf"
    | "threeHalf"
    | "fourHalf";
};
export type PlasmicRating__VariantsArgs = {
  rating?: SingleChoiceArg<
    | "one"
    | "two"
    | "three"
    | "four"
    | "five"
    | "half"
    | "oneHalf"
    | "twoHalf"
    | "threeHalf"
    | "fourHalf"
  >;
};
type VariantPropType = keyof PlasmicRating__VariantsArgs;
export const PlasmicRating__VariantProps = new Array<VariantPropType>("rating");

export type PlasmicRating__ArgsType = {};
type ArgPropType = keyof PlasmicRating__ArgsType;
export const PlasmicRating__ArgProps = new Array<ArgPropType>();

export type PlasmicRating__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultRatingProps {
  rating?: SingleChoiceArg<
    | "one"
    | "two"
    | "three"
    | "four"
    | "five"
    | "half"
    | "oneHalf"
    | "twoHalf"
    | "threeHalf"
    | "fourHalf"
  >;
  className?: string;
}

function PlasmicRating__RenderFunc(props: {
  variants: PlasmicRating__VariantsArgs;
  args: PlasmicRating__ArgsType;
  overrides: PlasmicRating__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "rating", "threeHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "twoHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "oneHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "half")
            ? HalfStarIcon
            : hasVariant(variants, "rating", "five")
            ? FullStarIcon
            : hasVariant(variants, "rating", "four")
            ? FullStarIcon
            : hasVariant(variants, "rating", "three")
            ? FullStarIcon
            : hasVariant(variants, "rating", "two")
            ? FullStarIcon
            : hasVariant(variants, "rating", "fourHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "one")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__zNgL2, {
          [sty.svgrating_five__zNgL2Zhiq1]: hasVariant(
            variants,
            "rating",
            "five"
          ),
          [sty.svgrating_fourHalf__zNgL2CsDkM]: hasVariant(
            variants,
            "rating",
            "fourHalf"
          ),
          [sty.svgrating_four__zNgL2EQ47H]: hasVariant(
            variants,
            "rating",
            "four"
          ),
          [sty.svgrating_half__zNgL2ZrCeF]: hasVariant(
            variants,
            "rating",
            "half"
          ),
          [sty.svgrating_oneHalf__zNgL2T5Fwr]: hasVariant(
            variants,
            "rating",
            "oneHalf"
          ),
          [sty.svgrating_one__zNgL2TZqlh]: hasVariant(
            variants,
            "rating",
            "one"
          ),
          [sty.svgrating_threeHalf__zNgL2TqYj]: hasVariant(
            variants,
            "rating",
            "threeHalf"
          ),
          [sty.svgrating_three__zNgL2Ko9Hp]: hasVariant(
            variants,
            "rating",
            "three"
          ),
          [sty.svgrating_twoHalf__zNgL2IbRpQ]: hasVariant(
            variants,
            "rating",
            "twoHalf"
          ),
          [sty.svgrating_two__zNgL227Jl]: hasVariant(variants, "rating", "two")
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "rating", "threeHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "twoHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "oneHalf")
            ? HalfStarIcon
            : hasVariant(variants, "rating", "five")
            ? FullStarIcon
            : hasVariant(variants, "rating", "four")
            ? FullStarIcon
            : hasVariant(variants, "rating", "three")
            ? FullStarIcon
            : hasVariant(variants, "rating", "two")
            ? FullStarIcon
            : hasVariant(variants, "rating", "fourHalf")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__qGzi2, {
          [sty.svgrating_five__qGzi2Zhiq1]: hasVariant(
            variants,
            "rating",
            "five"
          ),
          [sty.svgrating_fourHalf__qGzi2CsDkM]: hasVariant(
            variants,
            "rating",
            "fourHalf"
          ),
          [sty.svgrating_four__qGzi2EQ47H]: hasVariant(
            variants,
            "rating",
            "four"
          ),
          [sty.svgrating_oneHalf__qGzi2T5Fwr]: hasVariant(
            variants,
            "rating",
            "oneHalf"
          ),
          [sty.svgrating_threeHalf__qGzi2TqYj]: hasVariant(
            variants,
            "rating",
            "threeHalf"
          ),
          [sty.svgrating_three__qGzi2Ko9Hp]: hasVariant(
            variants,
            "rating",
            "three"
          ),
          [sty.svgrating_twoHalf__qGzi2IbRpQ]: hasVariant(
            variants,
            "rating",
            "twoHalf"
          ),
          [sty.svgrating_two__qGzi227Jl]: hasVariant(variants, "rating", "two")
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "rating", "threeHalf")
            ? FullStarIcon
            : hasVariant(variants, "rating", "twoHalf")
            ? HalfStarIcon
            : hasVariant(variants, "rating", "five")
            ? FullStarIcon
            : hasVariant(variants, "rating", "four")
            ? FullStarIcon
            : hasVariant(variants, "rating", "three")
            ? FullStarIcon
            : hasVariant(variants, "rating", "fourHalf")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__gLe9, {
          [sty.svgrating_five__gLe9Zhiq1]: hasVariant(
            variants,
            "rating",
            "five"
          ),
          [sty.svgrating_fourHalf__gLe9CsDkM]: hasVariant(
            variants,
            "rating",
            "fourHalf"
          ),
          [sty.svgrating_four__gLe9EQ47H]: hasVariant(
            variants,
            "rating",
            "four"
          ),
          [sty.svgrating_threeHalf__gLe9TqYj]: hasVariant(
            variants,
            "rating",
            "threeHalf"
          ),
          [sty.svgrating_three__gLe9Ko9Hp]: hasVariant(
            variants,
            "rating",
            "three"
          ),
          [sty.svgrating_twoHalf__gLe9IbRpQ]: hasVariant(
            variants,
            "rating",
            "twoHalf"
          )
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "rating", "threeHalf")
            ? HalfStarIcon
            : hasVariant(variants, "rating", "five")
            ? FullStarIcon
            : hasVariant(variants, "rating", "four")
            ? FullStarIcon
            : hasVariant(variants, "rating", "fourHalf")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg___7GDb8, {
          [sty.svgrating_five___7GDb8Zhiq1]: hasVariant(
            variants,
            "rating",
            "five"
          ),
          [sty.svgrating_fourHalf___7GDb8CsDkM]: hasVariant(
            variants,
            "rating",
            "fourHalf"
          ),
          [sty.svgrating_four___7GDb8EQ47H]: hasVariant(
            variants,
            "rating",
            "four"
          ),
          [sty.svgrating_threeHalf___7GDb8TqYj]: hasVariant(
            variants,
            "rating",
            "threeHalf"
          )
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "rating", "five")
            ? FullStarIcon
            : hasVariant(variants, "rating", "fourHalf")
            ? HalfStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__gzz3G, {
          [sty.svgrating_five__gzz3GZhiq1]: hasVariant(
            variants,
            "rating",
            "five"
          ),
          [sty.svgrating_fourHalf__gzz3GCsDkM]: hasVariant(
            variants,
            "rating",
            "fourHalf"
          )
        })}
        role={"img"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRating__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRating__VariantsArgs;
    args?: PlasmicRating__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRating__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRating__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRating__ArgProps,
          internalVariantPropNames: PlasmicRating__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRating__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRating";
  } else {
    func.displayName = `PlasmicRating.${nodeName}`;
  }
  return func;
}

export const PlasmicRating = Object.assign(
  // Top-level PlasmicRating renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicRating
    internalVariantProps: PlasmicRating__VariantProps,
    internalArgProps: PlasmicRating__ArgProps
  }
);

export default PlasmicRating;
/* prettier-ignore-end */
